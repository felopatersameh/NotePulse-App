import 'package:note_pulse/Core/SqlLite/strings_sql.dart';import 'package:path/path.dart';import 'package:sqflite/sqflite.dart';class DatabaseHelper {  static final DatabaseHelper _instance = DatabaseHelper._internal();  factory DatabaseHelper() => _instance;  DatabaseHelper._internal();  static Database? _database;  Future<Database> get database async {    if (_database != null) return _database!;    _database = await _initDatabase();    return _database!;  }  Future<Database> _initDatabase() async {    final dbPath = await getDatabasesPath();    final path = join(dbPath, AppDatabaseHelper.nameDatabase);    return await openDatabase(path, version: 2, onCreate: _onCreate,        onOpen: (dp) async {      print("opened DataBase");    });  }  Future<void> _onCreate(Database db, int version) async {    try {      await db.execute(AppDatabaseHelper.createNotesTable);      print("Created Database");    } catch (e) {      print("Error creating database: $e");    }  }  Future<int> insert(String table, Map<String, dynamic> values) async {    final db = await database;    return await db.insert(table, values);  }  Future<List<Map<String, dynamic>>> queryAll() async {    final db = await database;    final data = await db.query(      AppDatabaseHelper.tableOfNotes,      orderBy: "${AppDatabaseHelper.rawCreateIN} DESC ",    );    return data;  }  Future<int> update(String table, Map<String, dynamic> values,      String whereClause, List<dynamic> whereArgs) async {    final db = await database;    return await db.update(      table,      values,      where: whereClause,      whereArgs: whereArgs,    );  }  Future<int> delete(      String table, String whereClause, List<dynamic> whereArgs) async {    final db = await database;    return await db.delete(      table,      where: whereClause,      whereArgs: whereArgs,    );  }  Future<void> close() async {    final db = await database;    await db.close();  }}