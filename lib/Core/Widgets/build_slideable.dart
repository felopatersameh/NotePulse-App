import 'package:flutter/material.dart';import 'package:note_pulse/Core/Resources/icon.dart';import 'package:note_pulse/Features/Main/data/models/notes_model.dart';import 'package:note_pulse/Features/Main/presentation/manager/main_cubit.dart';import 'package:slideable/slideable.dart';import 'notes.dart';class BuildSlideable extends StatelessWidget {  final List<NotesModel> notes;  final GlobalKey<AnimatedListState> keyList;  final bool? removeItem;  final int index;  const BuildSlideable({    super.key,    required this.notes,    required this.keyList,    required this.index,    this.removeItem,  });  @override  Widget build(BuildContext context) {    return Slideable(      items: [        ActionItems(            icon: AppIcons.iconRemove,            onPress: () {              MainCubit.get(context).deleteNote(notes[index].id);              removeNoteAtIndex();            },            backgroudColor: Colors.transparent),        ActionItems(            icon: AppIcons.iconFavorite,            onPress: () {              String favorite = notes[index].favorite;              favorite = favorite == "yes" ? "no" : "yes";              MainCubit.get(context)                  .updateNote(notes[index].copyWith(favorite: favorite));              removeItem == true ? removeNoteAtIndex() : null;            },            backgroudColor: Colors.transparent),      ],      child: Notes(note: notes[index]),    );  }  void removeNoteAtIndex() {    final removedNote = notes.removeAt(index);    keyList.currentState?.removeItem(      index,      (context, animation) => ScaleTransition(        scale: animation,        child: Notes(note: removedNote),      ),      duration: const Duration(milliseconds: 300),    );  }  void addNoteAtIndex() {  }}