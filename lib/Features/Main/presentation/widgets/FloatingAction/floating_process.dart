import 'package:flutter/material.dart';import 'package:note_pulse/Core/Resources/icon.dart';import 'package:note_pulse/Features/Main/data/models/notes_model.dart';import '../../../../../Core/Resources/method.dart';import '../../manager/main_cubit.dart';import '../../pages/main_screen.dart';import 'form_add_note.dart';var keyForm = GlobalKey<FormState>();TextEditingController title = TextEditingController();TextEditingController time = TextEditingController();TextEditingController date = TextEditingController();TextEditingController description = TextEditingController();bool? check;NotesModel? _notesModel;//------------------------------------------------------------------------------------------------------------------------void removeTexts() {  time.text = '';  date.text = '';  title.text = '';  description.text = '';}Future<void> updateNote(context, NotesModel note) async {  if (keyForm.currentState?.validate() == true) {    note.title = title.text;    note.field = description.text;    note.time = time.text;    note.date = date.text;    note.createdAt = DateTime.now().toString();    await MainCubit.get(context).updateNote(note);    Navigator.pop(context);  }}Future<void> addNote(  context,) async {  if (keyForm.currentState?.validate() == true) {    final note = NotesModel(        id: AppMethod.generateAlphanumericID(),        title: title.text,        field: description.text,        color: AppMethod.generateRandomColor(),        time: time.text,        date: date.text,        createdAt: DateTime.now().toString(),        favorite: 'no',        done: 'no');    await MainCubit.get(context).addNote(note);    Navigator.pop(context); // Close dialog/screen after adding note  }}///////////////////////////////////////////////////////////////////////////////////Future<void> showBottomSheetInsert(context) async {  await keyScaffold.currentState      ?.showBottomSheet(        (context) => FormAddNote(          ketForm: keyForm,          time: time,          date: date,          name: title,          note: description,        ),      )      .closed      .then((value) {    MainCubit.get(context).changeBottomSheet(      iconData: Icons.post_add,      show: true,    );    check = null;    removeTexts();  });}Future<void> showBottomSheetUpdate(context, NotesModel note) async {  time = TextEditingController(text: note.time);  title = TextEditingController(text: note.title);  description = TextEditingController(text: note.field);  date = TextEditingController(text: note.date);  await keyScaffold.currentState      ?.showBottomSheet(        (context) => FormAddNote(          ketForm: keyForm,          time: time,          date: date,          name: title,          note: description,        ),      )      .closed      .then((value) {    MainCubit.get(context).changeBottomSheet(      iconData: AppIcons.iconFloatPart1,      show: true,    );    check = null;    _notesModel = null;    removeTexts();  });}Future<void> pressButton(context,    {required bool update, NotesModel? note}) async {  if (check == null) {    check = update;    _notesModel = note;  }  if (MainCubit.get(context).sheet == false) {    if (check!) {      await updateNote(context, _notesModel!);      check = null;      _notesModel = null;    } else {      await addNote(context);      check = null;    }  } else {    if (check!) {      showBottomSheetUpdate(context, note!);    } else {      showBottomSheetInsert(context);    }    MainCubit.get(context).changeBottomSheet(      iconData: AppIcons.iconFloatPart2,      show: false,    );  }}void nextScreen(context, screen) {  Navigator.push(      context,      MaterialPageRoute(        builder: (context) => screen,      ));}void pop(context) {  Navigator.pop(context);}